[*********************************************************************
[
[ rm.DavCastleLeftA2
[
[ 
[
[*********************************************************************

[***************************************
[ LOCAL DEFINES
[***************************************

[ add local defines here

[***************************************
[ FIRST CYCLE ONLY
[***************************************
if(newRoom) {
    [ load, draw and discard the picture for the current room
    load.pic(currentRoom);
    draw.pic(currentRoom);
    discard.pic(currentRoom);
    
    unanimate.all();
    assignn(vRoomInited, valTrue);

    load.view(vw.Roger);
    load.view(vw.RogerSplash);
    load.view(vw.RogerSwim);
    load.view(vw.CastleFlags);
    load.view(vw.CastleCrocs);
    load.view(vw.CastleDoors);
    load.view(vw.Mist);

    animate.obj(ego);
    animate.obj(objCastleFlags);
    animate.obj(objCastleCrocs);
    animate.obj(objCastleDoors);
    animate.obj(objMist);
    animate.obj(objMist2);

    set.view(ego, vw.Roger);
    set.view(objCastleFlags, vw.CastleFlags);
    set.view(objCastleCrocs, vw.CastleCrocs);
    set.view(objCastleDoors, vw.CastleDoors);
    set.view(objMist, vw.Mist);
    set.view(objMist2, vw.Mist);
    
    set.loop(objCastleDoors, 1);
    set.cel(objCastleDoors, 0);
    set.priority(objCastleDoors, 10);
    
    stop.cycling(objMist);
    stop.cycling(objMist2);
    stop.cycling(objCastleDoors);

    object.on.water(objCastleCrocs);

    if(equaln(vEgoX, 0)) {
        stop.cycling(ego);

        if(equaln(vEgoY, 0)) {
            assignn(vEgoX, 15);
            assignn(vEgoY, 130);
        }
    }

    position(objMist, 1, 40);
    position(objMist2, 30, 40);
    ignore.horizon(objCastleFlags);
    ignore.blocks(objCastleFlags);
    position(objCastleFlags, 115, 20);
    position(objCastleCrocs, 50, 165);
    position(objCastleDoors, 104, 120);
    position.v(ego, vEgoX, vEgoY);

    draw(ego);
    draw(objCastleFlags);
    draw(objCastleCrocs);
    draw(objCastleDoors);
    draw(objMist);
    draw(objMist2);

    wander(objCastleCrocs);    

    reset(fDoAction);

    set.horizon(40);   

    show.pic();
}

[***************************************
[ NON-INPUT CODE 
[***************************************

if(isset(fDoAction)) {
    get.posn(ego, vEgoX, vEgoY);
    assignn(vEgoX, 75);
    assignn(vEgoY, 163);
    assignn(vRoomInited, valFalse);
    new.room(rm.DavCastleHall);
}

if(edgeEgoHit == TOP_EDGE) {
    print("You're a bit foggy here. You decide to turn back.");
    get.posn(ego, vEgoX, vEgoY);
    assignn(vEgoY, 45);
    assignn(egoDir, DOWN);
    erase(ego);
    position.v(ego, vEgoX, vEgoY);
    draw(ego);
}

if(edgeEgoHit == LEFT_EDGE) {
    get.posn(ego, vEgoX, vEgoY);
    assignn(vEgoX, 150);
    assignn(vRoomInited, valFalse);
    new.room(rm.DavDaggerF2);     
}

if(edgeEgoHit == RIGHT_EDGE) {
    get.posn(ego, vEgoX, vEgoY);
    assignn(vEgoX, 15);
    assignn(vRoomInited, valFalse);
    new.room(rm.DavCastleRightB2); 
}


[***************************************
[ PROCESS PLAYER INPUT
[***************************************
if (haveInput && !haveMatch && unknownWordNum == 0) {
    if(said("open", "door")) {
        if(posn(ego, 97, 122, 121, 125)) {
            if(has("Invitation") && has("Cake")) {
                if(!isset(fPointsForEnterCastle)) {
                    set(fPointsForEnterCastle);
                    addn(currentScore, 1);    
                }
                
                end.of.loop(objCastleDoors, fDoAction);
            }
            else {
                print("The doors are locked. On the door is a notice.");
            }    
        }
        else {
            print("You need to be closer.");
        }
    }

    if((said("look", "room") || said("look"))) {
        print("You find yourself at the west end of a great castle. There's a large staircase and door here that leads into the castle.");
    }

    if(said("look", "door")) {
        print("The castle doors are made of heavy wood and iron. There's a notice nailed to the doors.");
    }
    
    if((said("read", "notice") || said("look", "notice"))) {
        if(posn(ego, 97, 122, 121, 125)) {
            if(!isset(fPointsForNoticeRead)) {
                set(fPointsForNoticeRead);
                addn(currentScore, 1);
            }
            
            print("The notice reads 'Hear Ye! Hear Ye! A party for the King will be held today. Attendees must bring an invitation and a party favor.' The notice gets you thinking. You need to get in here. If anyone can be of service. They will be inside.");
        }
        else {
            print("You need to be closer.");
        }
    }
    
    if(said("look", "fog")) {
        print("There's a 'think' fog here. It almost feels as much mental as it is physical. The more you look into it the more lost you feel.");
    }
}

[***************************************
[ CHECK FOR AN EXIT CONDITION
[***************************************
:exit

return();

[***************************************
[ DECLARED MESSAGES
[***************************************
#message 1 "You see nothing of interest." 
